Based on the provided information and assumptions, here is the proposed file structure and code implementation:

1. **benchmark.py**: The entrypoint file that contains the `BenchmarkTasks` class and handles command-line arguments.

```python
# benchmark.py

import argparse
from benchmark_tasks import BenchmarkTasks

def main():
    parser = argparse.ArgumentParser(description="Neural Network Benchmarking Suite")
    parser.add_argument("--device", choices=["CPU", "CUDA 0", "CUDA 1", "CUDA 2"], default="CPU", help="Computational device")
    parser.add_argument("--dtype", choices=["float16", "float32"], default="float32", help="Data type")
    args = parser.parse_args()

    benchmark = BenchmarkTasks(args.device, args.dtype)
    benchmark.binary_classification()
    benchmark.display_scoreboard()
    benchmark.visualize_scoreboard()

if __name__ == "__main__":
    main()
```

2. **benchmark_tasks.py**: Contains the `BenchmarkTasks` class that includes different benchmarking tasks and handling of results.

```python
# benchmark_tasks.py

import matplotlib.pyplot as plt

class BenchmarkTasks:
    def __init__(self, device, dtype):
        self.device = device
        self.dtype = dtype
        self.scoreboard = []

    def binary_classification(self):
        # Implementation of the binary classification benchmarking task
        pass

    def display_scoreboard(self):
        # Display the scoreboard with results and performance metrics
        pass

    def visualize_scoreboard(self):
        # Visualize the scoreboard using matplotlib or a similar library
        pass
```

3. **requirements.txt**: File specifying the required Python packages for the project.

```
torch
matplotlib
```

4. **README.md**: File containing project documentation, usage guidelines, and contributing guidelines.

```
# Neural Network Benchmarking Suite

This project is a Python-based benchmarking suite for neural networks. It allows for the selection of computational devices, choice of data types, and includes various benchmarking tasks.

## Installation

1. Clone the repository.
2. Install the required packages using `pip install -r requirements.txt`.

## Usage

Run the benchmarking suite using the following command:

```
python benchmark.py --device <device> --dtype <dtype>
```

Replace `<device>` with the desired computational device (CPU, CUDA 0, CUDA 1, CUDA 2) and `<dtype>` with the desired data type (float16, float32).

## Contributing

Contributions are welcome! Please follow the guidelines in the [CONTRIBUTING.md](CONTRIBUTING.md) file.

## License

This project is licensed under the [MIT License](LICENSE).
```

5. **CONTRIBUTING.md**: File containing guidelines for contributing to the project.

```
# Contributing Guidelines

Thank you for considering contributing to the Neural Network Benchmarking Suite! Please follow these guidelines to contribute to the project:

1. Fork the repository and create a new branch for your contribution.
2. Make your changes and ensure that the code passes all tests.
3. Submit a pull request with a clear description of your changes and the problem it solves.
4. Your pull request will be reviewed, and any necessary feedback will be provided.

Thank you for your contribution!
```

6. **LICENSE**: File containing the license information for the project.

```
MIT License

...

```

Please note that the implementation of the benchmarking tasks, scoreboard, and data visualization methods are not provided in the code snippets above. These methods should be implemented according to the specific requirements and logic of the benchmarking tasks.

Please let me know if there is anything else that needs to be clarified or if you have any further questions.